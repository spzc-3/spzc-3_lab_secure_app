[{"name":"CVE-2019-10086","scannerType":"OPENSOURCE","description":"In Apache Commons Beanutils 1.9.2, a special BeanIntrospector class was added which allows suppressing the ability for an attacker to access the classloader via the class property available on all Java objects. We, however were not using this by default characteristic of the PropertyUtilsBean.","severity":"HIGH","packageName":"commons-beanutils","packageVersion":"1.7.0","references":"* [https://ossindex.sonatype.org/vuln/9dd388b6-e51b-4261-9a0d-76f9aeb4f153?component-type\u003dmaven\u0026component-name\u003dcommons-beanutils.commons-beanutils\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vuln/9dd388b6-e51b-4261-9a0d-76f9aeb4f153?component-type\u003dmaven\u0026component-name\u003dcommons-beanutils.commons-beanutils\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2014-0114","scannerType":"OPENSOURCE","description":"Apache Commons BeanUtils, as distributed in lib/commons-beanutils-1.8.0.jar in Apache Struts 1.x through 1.3.10 and in other products requiring commons-beanutils through 1.9.2, does not suppress the class property, which allows remote attackers to \"manipulate\" the ClassLoader and execute arbitrary code via the class parameter, as demonstrated by the passing of this parameter to the getClass method of the ActionForm object in Struts 1.","severity":"HIGH","packageName":"commons-beanutils","packageVersion":"1.7.0","references":"* [https://ossindex.sonatype.org/vuln/cc1835c0-63c3-4b0a-baa5-a3891271bf60?component-type\u003dmaven\u0026component-name\u003dcommons-beanutils.commons-beanutils\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vuln/cc1835c0-63c3-4b0a-baa5-a3891271bf60?component-type\u003dmaven\u0026component-name\u003dcommons-beanutils.commons-beanutils\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2017-15708","scannerType":"OPENSOURCE","description":"In Apache Synapse, by default no authentication is required for Java Remote Method Invocation (RMI). So Apache Synapse 3.0.1 or all previous releases (3.0.0, 2.1.0, 2.0.0, 1.2, 1.1.2, 1.1.1) allows remote code execution attacks that can be performed by injecting specially crafted serialized objects. And the presence of Apache Commons Collections 3.2.1 (commons-collections-3.2.1.jar) or previous versions in Synapse distribution makes this exploitable. To mitigate the issue, we need to limit RMI access to trusted users only. Further upgrading to 3.0.1 version will eliminate the risk of having said Commons Collection version. In Synapse 3.0.1, Commons Collection has been updated to 3.2.2 version.","severity":"CRITICAL","packageName":"commons-collections","packageVersion":"3.1","references":"* [https://ossindex.sonatype.org/vuln/9b28a5d2-9be7-4414-a59b-98e25e4c608a?component-type\u003dmaven\u0026component-name\u003dcommons-collections.commons-collections\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vuln/9b28a5d2-9be7-4414-a59b-98e25e4c608a?component-type\u003dmaven\u0026component-name\u003dcommons-collections.commons-collections\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2015-6420","scannerType":"OPENSOURCE","description":"Serialized-object interfaces in certain Cisco Collaboration and Social Media; Endpoint Clients and Client Software; Network Application, Service, and Acceleration; Network and Content Security Devices; Network Management and Provisioning; Routing and Switching - Enterprise and Service Provider; Unified Computing; Voice and Unified Communications Devices; Video, Streaming, TelePresence, and Transcoding Devices; Wireless; and Cisco Hosted Services products allow remote attackers to execute arbitrary commands via a crafted serialized Java object, related to the Apache Commons Collections (ACC) library.","severity":"HIGH","packageName":"commons-collections","packageVersion":"3.1","references":"* [https://ossindex.sonatype.org/vuln/ac157388-2d0e-4c78-b3f4-033572d19286?component-type\u003dmaven\u0026component-name\u003dcommons-collections.commons-collections\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vuln/ac157388-2d0e-4c78-b3f4-033572d19286?component-type\u003dmaven\u0026component-name\u003dcommons-collections.commons-collections\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2016-1000031","scannerType":"OPENSOURCE","description":"Apache Commons FileUpload before 1.3.3 DiskFileItem File Manipulation Remote Code Execution","severity":"CRITICAL","packageName":"commons-fileupload","packageVersion":"1.3.2","references":"* [https://ossindex.sonatype.org/vuln/3d5968a4-4e14-4a98-8816-a4e847bc1426?component-type\u003dmaven\u0026component-name\u003dcommons-fileupload.commons-fileupload\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vuln/3d5968a4-4e14-4a98-8816-a4e847bc1426?component-type\u003dmaven\u0026component-name\u003dcommons-fileupload.commons-fileupload\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2020-25638","scannerType":"OPENSOURCE","description":"A flaw was found in hibernate-core in versions prior to and including 5.4.23.Final. A SQL injection in the implementation of the JPA Criteria API can permit unsanitized literals when a literal is used in the SQL comments of the query. This flaw could allow an attacker to access unauthorized information or possibly conduct further attacks. The highest threat from this vulnerability is to data confidentiality and integrity.","severity":"HIGH","packageName":"hibernate-core","packageVersion":"3.3.1.GA","references":"* [https://ossindex.sonatype.org/vuln/f4d0dc05-b8e2-4034-a1a6-badcb9d57863?component-type\u003dmaven\u0026component-name\u003dorg.hibernate.hibernate-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vuln/f4d0dc05-b8e2-4034-a1a6-badcb9d57863?component-type\u003dmaven\u0026component-name\u003dorg.hibernate.hibernate-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2020-9488","scannerType":"OPENSOURCE","description":"Improper validation of certificate with host mismatch in Apache Log4j SMTP appender. This could allow an SMTPS connection to be intercepted by a man-in-the-middle attack which could leak any log messages sent through that appender.","severity":"LOW","packageName":"log4j","packageVersion":"1.2.14","references":"* [https://ossindex.sonatype.org/vuln/d3477f9c-032a-44a7-a5e1-02ae35e4737c?component-type\u003dmaven\u0026component-name\u003dorg.apache.logging.log4j.log4j-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vuln/d3477f9c-032a-44a7-a5e1-02ae35e4737c?component-type\u003dmaven\u0026component-name\u003dorg.apache.logging.log4j.log4j-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2019-17571","scannerType":"OPENSOURCE","description":"Included in Log4j 1.2 is a SocketServer class that is vulnerable to deserialization of untrusted data which can be exploited to remotely execute arbitrary code when combined with a deserialization gadget when listening to untrusted network traffic for log data. This affects Log4j versions up to 1.2 up to 1.2.17.","severity":"CRITICAL","packageName":"log4j","packageVersion":"1.2.14","references":"* [https://ossindex.sonatype.org/vuln/e6e4ebea-da12-4bde-8f24-6272925ad093?component-type\u003dmaven\u0026component-name\u003dlog4j.log4j\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vuln/e6e4ebea-da12-4bde-8f24-6272925ad093?component-type\u003dmaven\u0026component-name\u003dlog4j.log4j\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2020-9488","scannerType":"OPENSOURCE","description":"Improper validation of certificate with host mismatch in Apache Log4j SMTP appender. This could allow an SMTPS connection to be intercepted by a man-in-the-middle attack which could leak any log messages sent through that appender.","severity":"LOW","packageName":"log4j-core","packageVersion":"2.3","references":"* [https://ossindex.sonatype.org/vuln/d3477f9c-032a-44a7-a5e1-02ae35e4737c?component-type\u003dmaven\u0026component-name\u003dorg.apache.logging.log4j.log4j-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vuln/d3477f9c-032a-44a7-a5e1-02ae35e4737c?component-type\u003dmaven\u0026component-name\u003dorg.apache.logging.log4j.log4j-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2017-5645","scannerType":"OPENSOURCE","description":"In Apache Log4j 2.x before 2.8.2, when using the TCP socket server or UDP socket server to receive serialized log events from another application, a specially crafted binary payload can be sent that, when deserialized, can execute arbitrary code.","severity":"CRITICAL","packageName":"log4j-core","packageVersion":"2.3","references":"* [https://ossindex.sonatype.org/vuln/5fe31860-7512-497e-ab88-394e228cebb5?component-type\u003dmaven\u0026component-name\u003dorg.apache.logging.log4j.log4j-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vuln/5fe31860-7512-497e-ab88-394e228cebb5?component-type\u003dmaven\u0026component-name\u003dorg.apache.logging.log4j.log4j-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2018-3258","scannerType":"OPENSOURCE","description":"Vulnerability in the MySQL Connectors component of Oracle MySQL (subcomponent: Connector/J). Supported versions that are affected are 8.0.12 and prior. Easily exploitable vulnerability allows low privileged attacker with network access via multiple protocols to compromise MySQL Connectors. Successful attacks of this vulnerability can result in takeover of MySQL Connectors. CVSS 3.0 Base Score 8.8 (Confidentiality, Integrity and Availability impacts). CVSS Vector: (CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H).","severity":"HIGH","packageName":"mysql-connector-java","packageVersion":"5.1.42","references":"* [https://ossindex.sonatype.org/vuln/a96ad840-7272-4f0d-8256-d99385995e65?component-type\u003dmaven\u0026component-name\u003dmysql.mysql-connector-java\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vuln/a96ad840-7272-4f0d-8256-d99385995e65?component-type\u003dmaven\u0026component-name\u003dmysql.mysql-connector-java\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2014-0225","scannerType":"OPENSOURCE","description":"When processing user provided XML documents, the Spring Framework 4.0.0 to 4.0.4, 3.0.0 to 3.2.8, and possibly earlier unsupported versions did not disable by default the resolution of URI references in a DTD declaration. This enabled an XXE attack.","severity":"HIGH","packageName":"spring-web","packageVersion":"3.0.5.RELEASE","references":"* [https://ossindex.sonatype.org/vuln/574d289f-b344-4510-a089-9473d2c6118c?component-type\u003dmaven\u0026component-name\u003dorg.springframework.spring-web\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vuln/574d289f-b344-4510-a089-9473d2c6118c?component-type\u003dmaven\u0026component-name\u003dorg.springframework.spring-web\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2014-0054","scannerType":"OPENSOURCE","description":"The Jaxb2RootElementHttpMessageConverter in Spring MVC in Spring Framework before 3.2.8 and 4.0.0 before 4.0.2 does not disable external entity resolution, which allows remote attackers to read arbitrary files, cause a denial of service, and conduct CSRF attacks via crafted XML, aka an XML External Entity (XXE) issue.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2013-4152, CVE-2013-7315, and CVE-2013-6429.","severity":"MEDIUM","packageName":"spring-web","packageVersion":"3.0.5.RELEASE","references":"* [https://ossindex.sonatype.org/vuln/ac314293-4801-42c5-96d0-573c1be06de6?component-type\u003dmaven\u0026component-name\u003dorg.springframework.spring-web\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vuln/ac314293-4801-42c5-96d0-573c1be06de6?component-type\u003dmaven\u0026component-name\u003dorg.springframework.spring-web\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2013-4152","scannerType":"OPENSOURCE","description":"The Spring OXM wrapper in Spring Framework before 3.2.4 and 4.0.0.M1, when using the JAXB marshaller, does not disable entity resolution, which allows context-dependent attackers to read arbitrary files, cause a denial of service, and conduct CSRF attacks via an XML external entity declaration in conjunction with an entity reference in a (1) DOMSource, (2) StAXSource, (3) SAXSource, or (4) StreamSource, aka an XML External Entity (XXE) issue.","severity":"MEDIUM","packageName":"spring-web","packageVersion":"3.0.5.RELEASE","references":"* [https://ossindex.sonatype.org/vuln/5a887220-77c9-4ebd-83c3-2a442b00774f?component-type\u003dmaven\u0026component-name\u003dorg.springframework.spring-web\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vuln/5a887220-77c9-4ebd-83c3-2a442b00774f?component-type\u003dmaven\u0026component-name\u003dorg.springframework.spring-web\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2015-2992","scannerType":"OPENSOURCE","description":"Apache Struts before 2.3.20 has a cross-site scripting (XSS) vulnerability.","severity":"MEDIUM","packageName":"struts-core","packageVersion":"1.3.8","references":"* [https://ossindex.sonatype.org/vuln/a3efaa36-6517-4ed4-b63a-6c7a1d8ce00f?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vuln/a3efaa36-6517-4ed4-b63a-6c7a1d8ce00f?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2016-4003","scannerType":"OPENSOURCE","description":"Cross-site scripting (XSS) vulnerability in the URLDecoder function in JRE before 1.8, as used in Apache Struts 2.x before 2.3.28, when using a single byte page encoding, allows remote attackers to inject arbitrary web script or HTML via multi-byte characters in a url-encoded parameter.","severity":"MEDIUM","packageName":"struts-core","packageVersion":"1.3.8","references":"* [https://ossindex.sonatype.org/vuln/0081c46d-8e5f-4553-9937-d25f3399d130?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vuln/0081c46d-8e5f-4553-9937-d25f3399d130?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2016-0785","scannerType":"OPENSOURCE","description":"Apache Struts 2.x before 2.3.28 allows remote attackers to execute arbitrary code via a \"%{}\" sequence in a tag attribute, aka forced double OGNL evaluation.","severity":"HIGH","packageName":"struts-core","packageVersion":"1.3.8","references":"* [https://ossindex.sonatype.org/vuln/5684f0fd-6580-461f-a0f6-eda4176de9bb?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vuln/5684f0fd-6580-461f-a0f6-eda4176de9bb?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2011-5057","scannerType":"OPENSOURCE","description":"Apache Struts 2.3.1.1 and earlier provides interfaces that do not properly restrict access to collections such as the session and request collections, which might allow remote attackers to modify run-time data values via a crafted parameter to an application that implements an affected interface, as demonstrated by the SessionAware, RequestAware, ApplicationAware, ServletRequestAware, ServletResponseAware, and ParameterAware interfaces.  NOTE: the vendor disputes the significance of this report because of an \"easy work-around in existing apps by configuring the interceptor.\"","severity":"MEDIUM","packageName":"struts-core","packageVersion":"1.3.8","references":"* [https://ossindex.sonatype.org/vuln/53dc946d-e590-4bab-909b-80313525e408?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vuln/53dc946d-e590-4bab-909b-80313525e408?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2014-0094","scannerType":"OPENSOURCE","description":"The ParametersInterceptor in Apache Struts before 2.3.16.1 allows remote attackers to \"manipulate\" the ClassLoader via the class parameter, which is passed to the getClass method.","severity":"MEDIUM","packageName":"struts-core","packageVersion":"1.3.8","references":"* [https://ossindex.sonatype.org/vuln/46502110-4592-408e-836b-331e9ee41e6b?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vuln/46502110-4592-408e-836b-331e9ee41e6b?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2012-0393","scannerType":"OPENSOURCE","description":"The ParameterInterceptor component in Apache Struts before 2.3.1.1 does not prevent access to public constructors, which allows remote attackers to create or overwrite arbitrary files via a crafted parameter that triggers the creation of a Java object.","severity":"MEDIUM","packageName":"struts-core","packageVersion":"1.3.8","references":"* [https://ossindex.sonatype.org/vuln/6240f443-fddd-477d-b620-86f8c74f773c?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vuln/6240f443-fddd-477d-b620-86f8c74f773c?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2012-0394","scannerType":"OPENSOURCE","description":"** DISPUTED ** The DebuggingInterceptor component in Apache Struts before 2.3.1.1, when developer mode is used, allows remote attackers to execute arbitrary commands via unspecified vectors.  NOTE: the vendor characterizes this behavior as not \"a security vulnerability itself.\"","severity":"MEDIUM","packageName":"struts-core","packageVersion":"1.3.8","references":"* [https://ossindex.sonatype.org/vuln/27f74926-9c22-4e6e-8677-073e708508d1?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vuln/27f74926-9c22-4e6e-8677-073e708508d1?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2014-0113","scannerType":"OPENSOURCE","description":"CookieInterceptor in Apache Struts before 2.3.16.2, when a wildcard cookiesName value is used, does not properly restrict access to the getClass method, which allows remote attackers to \"manipulate\" the ClassLoader and execute arbitrary code via a crafted request.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2014-0094.","severity":"HIGH","packageName":"struts-core","packageVersion":"1.3.8","references":"* [https://ossindex.sonatype.org/vuln/ff890408-a4b8-4e3f-a892-ee7e72b2c8e3?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vuln/ff890408-a4b8-4e3f-a892-ee7e72b2c8e3?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2013-1966","scannerType":"OPENSOURCE","description":"Apache Struts 2 before 2.3.14.1 allows remote attackers to execute arbitrary OGNL code via a crafted request that is not properly handled when using the includeParams attribute in the (1) URL or (2) A tag.","severity":"HIGH","packageName":"struts-core","packageVersion":"1.3.8","references":"* [https://ossindex.sonatype.org/vuln/64959e54-560d-4c85-b1ba-bae91251f948?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vuln/64959e54-560d-4c85-b1ba-bae91251f948?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2013-2115","scannerType":"OPENSOURCE","description":"Apache Struts 2 before 2.3.14.2 allows remote attackers to execute arbitrary OGNL code via a crafted request that is not properly handled when using the includeParams attribute in the (1) URL or (2) A tag. NOTE: this issue is due to an incomplete fix for CVE-2013-1966.","severity":"HIGH","packageName":"struts-core","packageVersion":"1.3.8","references":"* [https://ossindex.sonatype.org/vuln/a902e7ce-8d2b-4de9-a3a4-e717c9ebea3e?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vuln/a902e7ce-8d2b-4de9-a3a4-e717c9ebea3e?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2013-2134","scannerType":"OPENSOURCE","description":"Apache Struts 2 before 2.3.14.3 allows remote attackers to execute arbitrary OGNL code via a request with a crafted action name that is not properly handled during wildcard matching, a different vulnerability than CVE-2013-2135.","severity":"HIGH","packageName":"struts-core","packageVersion":"1.3.8","references":"* [https://ossindex.sonatype.org/vuln/5caecd83-b961-48ca-b29e-f39b8f302d08?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vuln/5caecd83-b961-48ca-b29e-f39b8f302d08?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2013-2135","scannerType":"OPENSOURCE","description":"Apache Struts 2 before 2.3.14.3 allows remote attackers to execute arbitrary OGNL code via a request with a crafted value that contains both \"${}\" and \"%{}\" sequences, which causes the OGNL code to be evaluated twice.","severity":"HIGH","packageName":"struts-core","packageVersion":"1.3.8","references":"* [https://ossindex.sonatype.org/vuln/35c24ffb-ba83-44a8-95a7-008281c53ec9?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vuln/35c24ffb-ba83-44a8-95a7-008281c53ec9?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2013-1965","scannerType":"OPENSOURCE","description":"Apache Struts Showcase App 2.0.0 through 2.3.13, as used in Struts 2 before 2.3.14.1, allows remote attackers to execute arbitrary OGNL code via a crafted parameter name that is not properly handled when invoking a redirect.","severity":"HIGH","packageName":"struts-core","packageVersion":"1.3.8","references":"* [https://ossindex.sonatype.org/vuln/7aa02cd2-5370-4f43-b202-d30665527d05?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vuln/7aa02cd2-5370-4f43-b202-d30665527d05?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2012-0392","scannerType":"OPENSOURCE","description":"The CookieInterceptor component in Apache Struts before 2.3.1.1 does not use the parameter-name whitelist, which allows remote attackers to execute arbitrary commands via a crafted HTTP Cookie header that triggers Java code execution through a static method.","severity":"HIGH","packageName":"struts-core","packageVersion":"1.3.8","references":"* [https://ossindex.sonatype.org/vuln/79adf5cc-c0b2-4733-af17-e6379798687d?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vuln/79adf5cc-c0b2-4733-af17-e6379798687d?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2012-0391","scannerType":"OPENSOURCE","description":"The ExceptionDelegator component in Apache Struts before 2.2.3.1 interprets parameter values as OGNL expressions during certain exception handling for mismatched data types of properties, which allows remote attackers to execute arbitrary Java code via a crafted parameter.","severity":"HIGH","packageName":"struts-core","packageVersion":"1.3.8","references":"* [https://ossindex.sonatype.org/vuln/59d508b0-5439-48ce-b68c-884f84d4c6e7?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vuln/59d508b0-5439-48ce-b68c-884f84d4c6e7?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2012-0838","scannerType":"OPENSOURCE","description":"Apache Struts 2 before 2.2.3.1 evaluates a string as an OGNL expression during the handling of a conversion error, which allows remote attackers to modify run-time data values, and consequently execute arbitrary code, via invalid input to a field.","severity":"HIGH","packageName":"struts-core","packageVersion":"1.3.8","references":"* [https://ossindex.sonatype.org/vuln/2acafe03-9968-4568-8574-31876a99612f?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vuln/2acafe03-9968-4568-8574-31876a99612f?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2018-1327","scannerType":"OPENSOURCE","description":"The Apache Struts REST Plugin is using XStream library which is vulnerable and allow perform a DoS attack when using a malicious request with specially crafted XML payload. Upgrade to the Apache Struts version 2.5.16 and switch to an optional Jackson XML handler as described here http://struts.apache.org/plugins/rest/#custom-contenttypehandlers. Another option is to implement a custom XML handler based on the Jackson XML handler from the Apache Struts 2.5.16.","severity":"HIGH","packageName":"struts2-core","packageVersion":"2.3.30","references":"* [https://ossindex.sonatype.org/vuln/9b82d7bc-5262-43b8-bd0d-50ede8e76e56?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts2-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vuln/9b82d7bc-5262-43b8-bd0d-50ede8e76e56?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts2-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2017-9787","scannerType":"OPENSOURCE","description":"When using a Spring AOP functionality to secure Struts actions it is possible to perform a DoS attack. Solution is to upgrade to Apache Struts version 2.5.12 or 2.3.33.","severity":"HIGH","packageName":"struts2-core","packageVersion":"2.3.30","references":"* [https://ossindex.sonatype.org/vuln/e2ebe514-dc44-474a-82ab-d20bd81bfc4c?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts2-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vuln/e2ebe514-dc44-474a-82ab-d20bd81bfc4c?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts2-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2017-9805","scannerType":"OPENSOURCE","description":"The REST Plugin in Apache Struts 2.1.2 through 2.3.x before 2.3.34 and 2.5.x before 2.5.13 uses an XStreamHandler with an instance of XStream for deserialization without any type filtering, which can lead to Remote Code Execution when deserializing XML payloads.","severity":"HIGH","packageName":"struts2-core","packageVersion":"2.3.30","references":"* [https://ossindex.sonatype.org/vuln/3c254119-620e-4d3a-b456-f150d179e2c1?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts2-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vuln/3c254119-620e-4d3a-b456-f150d179e2c1?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts2-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2019-0230","scannerType":"OPENSOURCE","description":"Apache Struts 2.0.0 to 2.5.20 forced double OGNL evaluation, when evaluated on raw user input in tag attributes, may lead to remote code execution.","severity":"CRITICAL","packageName":"struts2-core","packageVersion":"2.3.30","references":"* [https://ossindex.sonatype.org/vuln/56c17f52-5f6c-420b-b025-eac87f89b686?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts2-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vuln/56c17f52-5f6c-420b-b025-eac87f89b686?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts2-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2018-11776","scannerType":"OPENSOURCE","description":"Apache Struts versions 2.3 to 2.3.34 and 2.5 to 2.5.16 suffer from possible Remote Code Execution when alwaysSelectFullNamespace is true (either by user or a plugin like Convention Plugin) and then: results are used with no namespace and in same time, its upper package have no or wildcard namespace and similar to results, same possibility when using url tag which doesn\u0027t have value and action set and in same time, its upper package have no or wildcard namespace.","severity":"CRITICAL","packageName":"struts2-core","packageVersion":"2.3.30","references":"* [https://ossindex.sonatype.org/vuln/aea7ad84-58a9-4883-a9ef-f69fae4dcd9c?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts2-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vuln/aea7ad84-58a9-4883-a9ef-f69fae4dcd9c?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts2-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2020-17530","scannerType":"OPENSOURCE","description":"Forced OGNL evaluation, when evaluated on raw user input in tag attributes, may lead to remote code execution. Affected software : Apache Struts 2.0.0 - Struts 2.5.25.","severity":"CRITICAL","packageName":"struts2-core","packageVersion":"2.3.30","references":"* [https://ossindex.sonatype.org/vuln/b01cc492-a961-4a7d-9faa-0b3a40b435a4?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts2-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vuln/b01cc492-a961-4a7d-9faa-0b3a40b435a4?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts2-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2016-6795","scannerType":"OPENSOURCE","description":"In the Convention plugin in Apache Struts 2.3.20 through 2.3.30, it is possible to prepare a special URL which will be used for path traversal and execution of arbitrary code on server side.","severity":"CRITICAL","packageName":"struts2-core","packageVersion":"2.3.30","references":"* [https://ossindex.sonatype.org/vuln/6f72c191-e0e1-4be0-a72a-6a12e4bec948?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts2-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vuln/6f72c191-e0e1-4be0-a72a-6a12e4bec948?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts2-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2017-9791","scannerType":"OPENSOURCE","description":"The Struts 1 plugin in Apache Struts 2.3.x might allow remote code execution via a malicious field value passed in a raw message to the ActionMessage.","severity":"CRITICAL","packageName":"struts2-core","packageVersion":"2.3.30","references":"* [https://ossindex.sonatype.org/vuln/f2eb9ab7-09aa-4599-a351-7ebbd11ff11b?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts2-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vuln/f2eb9ab7-09aa-4599-a351-7ebbd11ff11b?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts2-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"CVE-2017-5638","scannerType":"OPENSOURCE","description":"The Jakarta Multipart parser in Apache Struts 2 2.3.x before 2.3.32 and 2.5.x before 2.5.10.1 has incorrect exception handling and error-message generation during file-upload attempts, which allows remote attackers to execute arbitrary commands via a crafted Content-Type, Content-Disposition, or Content-Length HTTP header, as exploited in the wild in March 2017 with a Content-Type header containing a #cmd\u003d string.","severity":"CRITICAL","packageName":"struts2-core","packageVersion":"2.3.30","references":"* [https://ossindex.sonatype.org/vuln/6fb3b58b-cf18-450e-ba0d-74432bc5ecff?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts2-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0](https://ossindex.sonatype.org/vuln/6fb3b58b-cf18-450e-ba0d-74432bc5ecff?component-type\u003dmaven\u0026component-name\u003dorg.apache.struts.struts2-core\u0026utm_source\u003ddependency-track\u0026utm_medium\u003dintegration\u0026utm_content\u003dv3.8.0)"},{"name":"Field isn\u0027t final but should be","scannerType":"SAST","description":"\n\n   \u003cp\u003e\nThis static field public but not final, and\ncould be changed by malicious code or\n        by accident from another package.\n        The field could be made final to avoid\n        this vulnerability.\u003c/p\u003e\n\n    ","filename":"com/appsecco/dvja/Constant.java","line":"4","severity":"Low","category":"MALICIOUS_CODE"},{"name":"Field isn\u0027t final but should be","scannerType":"SAST","description":"\n\n   \u003cp\u003e\nThis static field public but not final, and\ncould be changed by malicious code or\n        by accident from another package.\n        The field could be made final to avoid\n        this vulnerability.\u003c/p\u003e\n\n    ","filename":"com/appsecco/dvja/Constant.java","line":"6","severity":"Low","category":"MALICIOUS_CODE"},{"name":"Field isn\u0027t final but should be","scannerType":"SAST","description":"\n\n   \u003cp\u003e\nThis static field public but not final, and\ncould be changed by malicious code or\n        by accident from another package.\n        The field could be made final to avoid\n        this vulnerability.\u003c/p\u003e\n\n    ","filename":"com/appsecco/dvja/Constant.java","line":"7","severity":"Low","category":"MALICIOUS_CODE"},{"name":"Field isn\u0027t final but should be","scannerType":"SAST","description":"\n\n   \u003cp\u003e\nThis static field public but not final, and\ncould be changed by malicious code or\n        by accident from another package.\n        The field could be made final to avoid\n        this vulnerability.\u003c/p\u003e\n\n    ","filename":"com/appsecco/dvja/Constant.java","line":"5","severity":"Low","category":"MALICIOUS_CODE"},{"name":"Potentially sensitive data in a cookie","scannerType":"SAST","description":"\n            \n\u003cp\u003eThe information stored in a custom cookie should not be sensitive or related to the session. In most cases, sensitive data should only be stored in session\nand referenced by the user\u0027s session cookie. See HttpSession (\u003ccode\u003eHttpServletRequest.getSession()\u003c/code\u003e)\u003c/p\u003e\n\u003cp\u003eCustom cookies can be used for information that needs to live longer than and is independent of a specific session.\u003c/p\u003e\n\u003cbr/\u003e\n\u003cp\u003e\n\u003cb\u003eReference\u003c/b\u003e\u003cbr/\u003e\n\u003ca href\u003d\"https://cwe.mitre.org/data/definitions/315.html\"\u003eCWE-315: Cleartext Storage of Sensitive Information in a Cookie\u003c/a\u003e\n\u003c/p\u003e\n\n        ","filename":"com/appsecco/dvja/controllers/ApiAction.java","line":"40","severity":"Low","category":"SECURITY"},{"name":"Found Struts 2 endpoint","scannerType":"SAST","description":"\n            \n\u003cp\u003eIn Struts 2, the endpoints are Plain Old Java Objects (POJO) which means no Interface/Class needs to be implemented/extended.\u003c/p\u003e\n\u003cp\u003eWhen a request is routed to its controller (like the selected class), the supplied HTTP parameters are automatically mapped to setters for\nthe class. Therefore, all setters of this class should be considered as untrusted input even if the form doesn\u0027t include those values.\nAn attacker can simply provide additional values in the request, and they will be set in the object anyway, as long as that object has\nsuch a setter. The use of these parameters should be reviewed to make sure they are used safely.\u003c/p\u003e\n\n        ","filename":"com/appsecco/dvja/controllers/Home.java","line":"8","severity":"Low","category":"SECURITY"},{"name":"Found Struts 2 endpoint","scannerType":"SAST","description":"\n            \n\u003cp\u003eIn Struts 2, the endpoints are Plain Old Java Objects (POJO) which means no Interface/Class needs to be implemented/extended.\u003c/p\u003e\n\u003cp\u003eWhen a request is routed to its controller (like the selected class), the supplied HTTP parameters are automatically mapped to setters for\nthe class. Therefore, all setters of this class should be considered as untrusted input even if the form doesn\u0027t include those values.\nAn attacker can simply provide additional values in the request, and they will be set in the object anyway, as long as that object has\nsuch a setter. The use of these parameters should be reviewed to make sure they are used safely.\u003c/p\u003e\n\n        ","filename":"com/appsecco/dvja/controllers/Login.java","line":"7","severity":"Low","category":"SECURITY"},{"name":"Potential Command Injection","scannerType":"SAST","description":"\n            \n\u003cp\u003eThe highlighted API is used to execute a system command. If unfiltered input is passed to this API, it can lead to arbitrary command execution.\u003c/p\u003e\n\u003cbr/\u003e\n\u003cp\u003e\n    \u003cb\u003eVulnerable Code:\u003c/b\u003e\u003cbr/\u003e\n\u003cpre\u003eimport java.lang.Runtime;\n\nRuntime r \u003d Runtime.getRuntime();\nr.exec(\"/bin/sh -c some_tool\" + input);\u003c/pre\u003e\n\u003c/p\u003e\n\u003cp\u003e\n\u003cb\u003eReferences\u003c/b\u003e\u003cbr/\u003e\n\u003ca href\u003d\"https://www.owasp.org/index.php/Command_Injection\"\u003eOWASP: Command Injection\u003c/a\u003e\u003cbr/\u003e\n\u003ca href\u003d\"https://www.owasp.org/index.php/Top_10_2013-A1-Injection\"\u003eOWASP: Top 10 2013-A1-Injection\u003c/a\u003e\u003cbr/\u003e\n\u003ca href\u003d\"https://cwe.mitre.org/data/definitions/78.html\"\u003eCWE-78: Improper Neutralization of Special Elements used in an OS Command (\u0027OS Command Injection\u0027)\u003c/a\u003e\n\u003c/p\u003e\n\n        ","filename":"com/appsecco/dvja/controllers/PingAction.java","line":"45","severity":"Medium","category":"SECURITY"},{"name":"Found Struts 2 endpoint","scannerType":"SAST","description":"\n            \n\u003cp\u003eIn Struts 2, the endpoints are Plain Old Java Objects (POJO) which means no Interface/Class needs to be implemented/extended.\u003c/p\u003e\n\u003cp\u003eWhen a request is routed to its controller (like the selected class), the supplied HTTP parameters are automatically mapped to setters for\nthe class. Therefore, all setters of this class should be considered as untrusted input even if the form doesn\u0027t include those values.\nAn attacker can simply provide additional values in the request, and they will be set in the object anyway, as long as that object has\nsuch a setter. The use of these parameters should be reviewed to make sure they are used safely.\u003c/p\u003e\n\n        ","filename":"com/appsecco/dvja/controllers/PingAction.java","line":"9","severity":"Low","category":"SECURITY"},{"name":"Found Struts 2 endpoint","scannerType":"SAST","description":"\n            \n\u003cp\u003eIn Struts 2, the endpoints are Plain Old Java Objects (POJO) which means no Interface/Class needs to be implemented/extended.\u003c/p\u003e\n\u003cp\u003eWhen a request is routed to its controller (like the selected class), the supplied HTTP parameters are automatically mapped to setters for\nthe class. Therefore, all setters of this class should be considered as untrusted input even if the form doesn\u0027t include those values.\nAn attacker can simply provide additional values in the request, and they will be set in the object anyway, as long as that object has\nsuch a setter. The use of these parameters should be reviewed to make sure they are used safely.\u003c/p\u003e\n\n        ","filename":"com/appsecco/dvja/controllers/ProductAction.java","line":"11","severity":"Low","category":"SECURITY"},{"name":"Found Struts 2 endpoint","scannerType":"SAST","description":"\n            \n\u003cp\u003eIn Struts 2, the endpoints are Plain Old Java Objects (POJO) which means no Interface/Class needs to be implemented/extended.\u003c/p\u003e\n\u003cp\u003eWhen a request is routed to its controller (like the selected class), the supplied HTTP parameters are automatically mapped to setters for\nthe class. Therefore, all setters of this class should be considered as untrusted input even if the form doesn\u0027t include those values.\nAn attacker can simply provide additional values in the request, and they will be set in the object anyway, as long as that object has\nsuch a setter. The use of these parameters should be reviewed to make sure they are used safely.\u003c/p\u003e\n\n        ","filename":"com/appsecco/dvja/controllers/RedirectAction.java","line":"5","severity":"Low","category":"SECURITY"},{"name":"Found Struts 2 endpoint","scannerType":"SAST","description":"\n            \n\u003cp\u003eIn Struts 2, the endpoints are Plain Old Java Objects (POJO) which means no Interface/Class needs to be implemented/extended.\u003c/p\u003e\n\u003cp\u003eWhen a request is routed to its controller (like the selected class), the supplied HTTP parameters are automatically mapped to setters for\nthe class. Therefore, all setters of this class should be considered as untrusted input even if the form doesn\u0027t include those values.\nAn attacker can simply provide additional values in the request, and they will be set in the object anyway, as long as that object has\nsuch a setter. The use of these parameters should be reviewed to make sure they are used safely.\u003c/p\u003e\n\n        ","filename":"com/appsecco/dvja/controllers/Register.java","line":"7","severity":"Low","category":"SECURITY"},{"name":"Found Struts 2 endpoint","scannerType":"SAST","description":"\n            \n\u003cp\u003eIn Struts 2, the endpoints are Plain Old Java Objects (POJO) which means no Interface/Class needs to be implemented/extended.\u003c/p\u003e\n\u003cp\u003eWhen a request is routed to its controller (like the selected class), the supplied HTTP parameters are automatically mapped to setters for\nthe class. Therefore, all setters of this class should be considered as untrusted input even if the form doesn\u0027t include those values.\nAn attacker can simply provide additional values in the request, and they will be set in the object anyway, as long as that object has\nsuch a setter. The use of these parameters should be reviewed to make sure they are used safely.\u003c/p\u003e\n\n        ","filename":"com/appsecco/dvja/controllers/ResetPassword.java","line":"6","severity":"Low","category":"SECURITY"},{"name":"May expose internal representation by returning reference to mutable object","scannerType":"SAST","description":"\n\n  \u003cp\u003e Returning a reference to a mutable object value stored in one of the object\u0027s fields\n  exposes the internal representation of the object.\u0026nbsp;\n   If instances\n   are accessed by untrusted code, and unchecked changes to\n   the mutable object would compromise security or other\n   important properties, you will need to do something different.\n  Returning a new copy of the object is better approach in many situations.\u003c/p\u003e\n\n    ","filename":"com/appsecco/dvja/models/Product.java","line":"77","severity":"Low","category":"MALICIOUS_CODE"},{"name":"May expose internal representation by returning reference to mutable object","scannerType":"SAST","description":"\n\n  \u003cp\u003e Returning a reference to a mutable object value stored in one of the object\u0027s fields\n  exposes the internal representation of the object.\u0026nbsp;\n   If instances\n   are accessed by untrusted code, and unchecked changes to\n   the mutable object would compromise security or other\n   important properties, you will need to do something different.\n  Returning a new copy of the object is better approach in many situations.\u003c/p\u003e\n\n    ","filename":"com/appsecco/dvja/models/Product.java","line":"85","severity":"Low","category":"MALICIOUS_CODE"},{"name":"May expose internal representation by incorporating reference to mutable object","scannerType":"SAST","description":"\n\n  \u003cp\u003e This code stores a reference to an externally mutable object into the\n  internal representation of the object.\u0026nbsp;\n   If instances\n   are accessed by untrusted code, and unchecked changes to\n   the mutable object would compromise security or other\n   important properties, you will need to do something different.\n  Storing a copy of the object is better approach in many situations.\u003c/p\u003e\n\n    ","filename":"com/appsecco/dvja/models/Product.java","line":"81","severity":"Low","category":"MALICIOUS_CODE"},{"name":"May expose internal representation by incorporating reference to mutable object","scannerType":"SAST","description":"\n\n  \u003cp\u003e This code stores a reference to an externally mutable object into the\n  internal representation of the object.\u0026nbsp;\n   If instances\n   are accessed by untrusted code, and unchecked changes to\n   the mutable object would compromise security or other\n   important properties, you will need to do something different.\n  Storing a copy of the object is better approach in many situations.\u003c/p\u003e\n\n    ","filename":"com/appsecco/dvja/models/Product.java","line":"89","severity":"Low","category":"MALICIOUS_CODE"},{"name":"Potential CRLF Injection for logs","scannerType":"SAST","description":"\n            \n\u003cp\u003e\n    When data from an untrusted source is put into a logger and not neutralized correctly,\n    an attacker could forge log entries or include malicious content.\n    Inserted false entries could be used to skew statistics, distract the administrator\n    or even to implicate another party in the commission of a malicious act.\n    If the log file is processed automatically, the attacker can render the file unusable\n    by corrupting the format of the file or injecting unexpected characters.\n    An attacker may also inject code or other commands into the log file and take advantage\n    of a vulnerability in the log processing utility (e.g. command injection or XSS).\n\u003c/p\u003e\n\u003cbr/\u003e\n\u003cp\u003e\n\u003cb\u003eCode at risk:\u003c/b\u003e\u003cbr/\u003e\n\u003cpre\u003eString val \u003d request.getParameter(\"user\");\nString metadata \u003d request.getParameter(\"metadata\");\n[...]\nif(authenticated) {\n    log.info(\"User \" + val + \" (\" + metadata + \") was authenticated successfully\");\n}\nelse {\n    log.info(\"User \" + val + \" (\" + metadata + \") was not authenticated\");\n}\n\u003c/pre\u003e\n\nA malicious user could send the metadata parameter with the value: \u003ccode\u003e\"Firefox) was authenticated successfully\\r\\n[INFO] User bbb (Internet Explorer\"\u003c/code\u003e.\n\u003c/p\u003e\n\n\u003cb\u003eSolution:\u003c/b\u003e\u003cbr/\u003e\n\u003cp\u003e\nYou can manually sanitize each parameter.\n\u003cpre\u003e\nlog.info(\"User \" + val.replaceAll(\"[\\r\\n]\",\"\") + \" (\" + userAgent.replaceAll(\"[\\r\\n]\",\"\") + \") was not authenticated\");\n\u003c/pre\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\nYou can also configure your logger service to replace new line for all message events. Here is sample configuration for LogBack \u003ca href\u003d\"https://logback.qos.ch/manual/layouts.html#replace\"\u003eusing the \u003ccode\u003ereplace\u003c/code\u003e function\u003c/a\u003e.\n\u003cpre\u003e\n\u0026lt;pattern\u0026gt;%-5level - %replace(%msg){\u0027[\\r\\n]\u0027, \u0027\u0027}%n\u0026lt;/pattern\u0026gt;\n\u003c/pre\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\nFinally, you can use a logger implementation that replace new line by spaces.\nThe project \u003ca href\u003d\"https://github.com/javabeanz/owasp-security-logging\"\u003eOWASP Security Logging\u003c/a\u003e has an implementation for Logback and Log4j.\n\u003c/p\u003e\n\n\u003cbr/\u003e\n\u003cp\u003e\n    \u003cb\u003eReferences\u003c/b\u003e\u003cbr/\u003e\n    \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE-117: Improper Output Neutralization for Logs\u003c/a\u003e\u003cbr/\u003e\n    \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/93.html\"\u003eCWE-93: Improper Neutralization of CRLF Sequences (\u0027CRLF Injection\u0027)\u003c/a\u003e\u003cbr/\u003e\n    \u003ca href\u003d\"https://logback.qos.ch/manual/layouts.html#replace\"\u003eCWE-93: Improper Neutralization of CRLF Sequences (\u0027CRLF Injection\u0027)\u003c/a\u003e\u003cbr/\u003e\n    \u003ca href\u003d\"https://github.com/javabeanz/owasp-security-logging\"\u003eOWASP Security Logging\u003c/a\u003e\u003cbr/\u003e\n\u003c/p\u003e\n\n\n        ","filename":"com/appsecco/dvja/services/ProductService.java","line":"28","severity":"Low","category":"SECURITY"},{"name":"Potential SQL/JPQL Injection (JPA)","scannerType":"SAST","description":"\n            \n\u003cp\u003e\nThe input values included in SQL queries need to be passed in safely.\nBind variables in prepared statements can be used to easily mitigate the risk of SQL injection.\n\u003c/p\u003e\n\u003cp\u003e\n    \u003cb\u003eVulnerable Code:\u003c/b\u003e\u003cbr/\u003e\n    \u003cpre\u003e\nEntityManager pm \u003d getEM();\n\nTypedQuery\u0026lt;UserEntity\u0026gt; q \u003d em.createQuery(\n    String.format(\"select * from Users where name \u003d %s\", username),\n    UserEntity.class);\n\nUserEntity res \u003d q.getSingleResult();\u003c/pre\u003e\n\u003c/p\u003e\n\u003cp\u003e\n    \u003cb\u003eSolution:\u003c/b\u003e\u003cbr/\u003e\n    \u003cpre\u003e\nTypedQuery\u0026lt;UserEntity\u0026gt; q \u003d em.createQuery(\n    \"select * from Users where name \u003d usernameParam\",UserEntity.class)\n    .setParameter(\"usernameParam\", username);\n\nUserEntity res \u003d q.getSingleResult();\u003c/pre\u003e\n\u003c/p\u003e\n\u003cbr/\u003e\n\u003cp\u003e\n\u003cb\u003eReferences (JPA)\u003c/b\u003e\u003cbr/\u003e\n\u003ca href\u003d\"https://docs.oracle.com/javaee/6/tutorial/doc/bnbrg.html\"\u003eThe Java EE 6 Tutorial: Creating Queries Using the Java Persistence Query Language\u003c/a\u003e\u003cbr/\u003e\n\u003cb\u003eReferences (SQL injection)\u003c/b\u003e\u003cbr/\u003e\n\u003ca href\u003d\"http://projects.webappsec.org/w/page/13246963/SQL%20Injection\"\u003eWASC-19: SQL Injection\u003c/a\u003e\u003cbr/\u003e\n\u003ca href\u003d\"https://capec.mitre.org/data/definitions/66.html\"\u003eCAPEC-66: SQL Injection\u003c/a\u003e\u003cbr/\u003e\n\u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE-89: Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)\u003c/a\u003e\u003cbr/\u003e\n\u003ca href\u003d\"https://www.owasp.org/index.php/Top_10_2013-A1-Injection\"\u003eOWASP: Top 10 2013-A1-Injection\u003c/a\u003e\u003cbr/\u003e\n\u003ca href\u003d\"https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet\"\u003eOWASP: SQL Injection Prevention Cheat Sheet\u003c/a\u003e\u003cbr/\u003e\n\u003ca href\u003d\"https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet\"\u003eOWASP: Query Parameterization Cheat Sheet\u003c/a\u003e\u003cbr/\u003e\n\u003c/p\u003e\n\n        ","filename":"com/appsecco/dvja/services/ProductService.java","line":"48","severity":"Medium","category":"SECURITY"},{"name":"Potential CRLF Injection for logs","scannerType":"SAST","description":"\n            \n\u003cp\u003e\n    When data from an untrusted source is put into a logger and not neutralized correctly,\n    an attacker could forge log entries or include malicious content.\n    Inserted false entries could be used to skew statistics, distract the administrator\n    or even to implicate another party in the commission of a malicious act.\n    If the log file is processed automatically, the attacker can render the file unusable\n    by corrupting the format of the file or injecting unexpected characters.\n    An attacker may also inject code or other commands into the log file and take advantage\n    of a vulnerability in the log processing utility (e.g. command injection or XSS).\n\u003c/p\u003e\n\u003cbr/\u003e\n\u003cp\u003e\n\u003cb\u003eCode at risk:\u003c/b\u003e\u003cbr/\u003e\n\u003cpre\u003eString val \u003d request.getParameter(\"user\");\nString metadata \u003d request.getParameter(\"metadata\");\n[...]\nif(authenticated) {\n    log.info(\"User \" + val + \" (\" + metadata + \") was authenticated successfully\");\n}\nelse {\n    log.info(\"User \" + val + \" (\" + metadata + \") was not authenticated\");\n}\n\u003c/pre\u003e\n\nA malicious user could send the metadata parameter with the value: \u003ccode\u003e\"Firefox) was authenticated successfully\\r\\n[INFO] User bbb (Internet Explorer\"\u003c/code\u003e.\n\u003c/p\u003e\n\n\u003cb\u003eSolution:\u003c/b\u003e\u003cbr/\u003e\n\u003cp\u003e\nYou can manually sanitize each parameter.\n\u003cpre\u003e\nlog.info(\"User \" + val.replaceAll(\"[\\r\\n]\",\"\") + \" (\" + userAgent.replaceAll(\"[\\r\\n]\",\"\") + \") was not authenticated\");\n\u003c/pre\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\nYou can also configure your logger service to replace new line for all message events. Here is sample configuration for LogBack \u003ca href\u003d\"https://logback.qos.ch/manual/layouts.html#replace\"\u003eusing the \u003ccode\u003ereplace\u003c/code\u003e function\u003c/a\u003e.\n\u003cpre\u003e\n\u0026lt;pattern\u0026gt;%-5level - %replace(%msg){\u0027[\\r\\n]\u0027, \u0027\u0027}%n\u0026lt;/pattern\u0026gt;\n\u003c/pre\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\nFinally, you can use a logger implementation that replace new line by spaces.\nThe project \u003ca href\u003d\"https://github.com/javabeanz/owasp-security-logging\"\u003eOWASP Security Logging\u003c/a\u003e has an implementation for Logback and Log4j.\n\u003c/p\u003e\n\n\u003cbr/\u003e\n\u003cp\u003e\n    \u003cb\u003eReferences\u003c/b\u003e\u003cbr/\u003e\n    \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE-117: Improper Output Neutralization for Logs\u003c/a\u003e\u003cbr/\u003e\n    \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/93.html\"\u003eCWE-93: Improper Neutralization of CRLF Sequences (\u0027CRLF Injection\u0027)\u003c/a\u003e\u003cbr/\u003e\n    \u003ca href\u003d\"https://logback.qos.ch/manual/layouts.html#replace\"\u003eCWE-93: Improper Neutralization of CRLF Sequences (\u0027CRLF Injection\u0027)\u003c/a\u003e\u003cbr/\u003e\n    \u003ca href\u003d\"https://github.com/javabeanz/owasp-security-logging\"\u003eOWASP Security Logging\u003c/a\u003e\u003cbr/\u003e\n\u003c/p\u003e\n\n\n        ","filename":"com/appsecco/dvja/services/UserService.java","line":"93","severity":"Low","category":"SECURITY"},{"name":"Potential CRLF Injection for logs","scannerType":"SAST","description":"\n            \n\u003cp\u003e\n    When data from an untrusted source is put into a logger and not neutralized correctly,\n    an attacker could forge log entries or include malicious content.\n    Inserted false entries could be used to skew statistics, distract the administrator\n    or even to implicate another party in the commission of a malicious act.\n    If the log file is processed automatically, the attacker can render the file unusable\n    by corrupting the format of the file or injecting unexpected characters.\n    An attacker may also inject code or other commands into the log file and take advantage\n    of a vulnerability in the log processing utility (e.g. command injection or XSS).\n\u003c/p\u003e\n\u003cbr/\u003e\n\u003cp\u003e\n\u003cb\u003eCode at risk:\u003c/b\u003e\u003cbr/\u003e\n\u003cpre\u003eString val \u003d request.getParameter(\"user\");\nString metadata \u003d request.getParameter(\"metadata\");\n[...]\nif(authenticated) {\n    log.info(\"User \" + val + \" (\" + metadata + \") was authenticated successfully\");\n}\nelse {\n    log.info(\"User \" + val + \" (\" + metadata + \") was not authenticated\");\n}\n\u003c/pre\u003e\n\nA malicious user could send the metadata parameter with the value: \u003ccode\u003e\"Firefox) was authenticated successfully\\r\\n[INFO] User bbb (Internet Explorer\"\u003c/code\u003e.\n\u003c/p\u003e\n\n\u003cb\u003eSolution:\u003c/b\u003e\u003cbr/\u003e\n\u003cp\u003e\nYou can manually sanitize each parameter.\n\u003cpre\u003e\nlog.info(\"User \" + val.replaceAll(\"[\\r\\n]\",\"\") + \" (\" + userAgent.replaceAll(\"[\\r\\n]\",\"\") + \") was not authenticated\");\n\u003c/pre\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\nYou can also configure your logger service to replace new line for all message events. Here is sample configuration for LogBack \u003ca href\u003d\"https://logback.qos.ch/manual/layouts.html#replace\"\u003eusing the \u003ccode\u003ereplace\u003c/code\u003e function\u003c/a\u003e.\n\u003cpre\u003e\n\u0026lt;pattern\u0026gt;%-5level - %replace(%msg){\u0027[\\r\\n]\u0027, \u0027\u0027}%n\u0026lt;/pattern\u0026gt;\n\u003c/pre\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\nFinally, you can use a logger implementation that replace new line by spaces.\nThe project \u003ca href\u003d\"https://github.com/javabeanz/owasp-security-logging\"\u003eOWASP Security Logging\u003c/a\u003e has an implementation for Logback and Log4j.\n\u003c/p\u003e\n\n\u003cbr/\u003e\n\u003cp\u003e\n    \u003cb\u003eReferences\u003c/b\u003e\u003cbr/\u003e\n    \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE-117: Improper Output Neutralization for Logs\u003c/a\u003e\u003cbr/\u003e\n    \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/93.html\"\u003eCWE-93: Improper Neutralization of CRLF Sequences (\u0027CRLF Injection\u0027)\u003c/a\u003e\u003cbr/\u003e\n    \u003ca href\u003d\"https://logback.qos.ch/manual/layouts.html#replace\"\u003eCWE-93: Improper Neutralization of CRLF Sequences (\u0027CRLF Injection\u0027)\u003c/a\u003e\u003cbr/\u003e\n    \u003ca href\u003d\"https://github.com/javabeanz/owasp-security-logging\"\u003eOWASP Security Logging\u003c/a\u003e\u003cbr/\u003e\n\u003c/p\u003e\n\n\n        ","filename":"com/appsecco/dvja/services/UserService.java","line":"104","severity":"Low","category":"SECURITY"},{"name":"Potential CRLF Injection for logs","scannerType":"SAST","description":"\n            \n\u003cp\u003e\n    When data from an untrusted source is put into a logger and not neutralized correctly,\n    an attacker could forge log entries or include malicious content.\n    Inserted false entries could be used to skew statistics, distract the administrator\n    or even to implicate another party in the commission of a malicious act.\n    If the log file is processed automatically, the attacker can render the file unusable\n    by corrupting the format of the file or injecting unexpected characters.\n    An attacker may also inject code or other commands into the log file and take advantage\n    of a vulnerability in the log processing utility (e.g. command injection or XSS).\n\u003c/p\u003e\n\u003cbr/\u003e\n\u003cp\u003e\n\u003cb\u003eCode at risk:\u003c/b\u003e\u003cbr/\u003e\n\u003cpre\u003eString val \u003d request.getParameter(\"user\");\nString metadata \u003d request.getParameter(\"metadata\");\n[...]\nif(authenticated) {\n    log.info(\"User \" + val + \" (\" + metadata + \") was authenticated successfully\");\n}\nelse {\n    log.info(\"User \" + val + \" (\" + metadata + \") was not authenticated\");\n}\n\u003c/pre\u003e\n\nA malicious user could send the metadata parameter with the value: \u003ccode\u003e\"Firefox) was authenticated successfully\\r\\n[INFO] User bbb (Internet Explorer\"\u003c/code\u003e.\n\u003c/p\u003e\n\n\u003cb\u003eSolution:\u003c/b\u003e\u003cbr/\u003e\n\u003cp\u003e\nYou can manually sanitize each parameter.\n\u003cpre\u003e\nlog.info(\"User \" + val.replaceAll(\"[\\r\\n]\",\"\") + \" (\" + userAgent.replaceAll(\"[\\r\\n]\",\"\") + \") was not authenticated\");\n\u003c/pre\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\nYou can also configure your logger service to replace new line for all message events. Here is sample configuration for LogBack \u003ca href\u003d\"https://logback.qos.ch/manual/layouts.html#replace\"\u003eusing the \u003ccode\u003ereplace\u003c/code\u003e function\u003c/a\u003e.\n\u003cpre\u003e\n\u0026lt;pattern\u0026gt;%-5level - %replace(%msg){\u0027[\\r\\n]\u0027, \u0027\u0027}%n\u0026lt;/pattern\u0026gt;\n\u003c/pre\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\nFinally, you can use a logger implementation that replace new line by spaces.\nThe project \u003ca href\u003d\"https://github.com/javabeanz/owasp-security-logging\"\u003eOWASP Security Logging\u003c/a\u003e has an implementation for Logback and Log4j.\n\u003c/p\u003e\n\n\u003cbr/\u003e\n\u003cp\u003e\n    \u003cb\u003eReferences\u003c/b\u003e\u003cbr/\u003e\n    \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE-117: Improper Output Neutralization for Logs\u003c/a\u003e\u003cbr/\u003e\n    \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/93.html\"\u003eCWE-93: Improper Neutralization of CRLF Sequences (\u0027CRLF Injection\u0027)\u003c/a\u003e\u003cbr/\u003e\n    \u003ca href\u003d\"https://logback.qos.ch/manual/layouts.html#replace\"\u003eCWE-93: Improper Neutralization of CRLF Sequences (\u0027CRLF Injection\u0027)\u003c/a\u003e\u003cbr/\u003e\n    \u003ca href\u003d\"https://github.com/javabeanz/owasp-security-logging\"\u003eOWASP Security Logging\u003c/a\u003e\u003cbr/\u003e\n\u003c/p\u003e\n\n\n        ","filename":"com/appsecco/dvja/services/UserService.java","line":"29","severity":"Low","category":"SECURITY"},{"name":"Potential SQL/JPQL Injection (JPA)","scannerType":"SAST","description":"\n            \n\u003cp\u003e\nThe input values included in SQL queries need to be passed in safely.\nBind variables in prepared statements can be used to easily mitigate the risk of SQL injection.\n\u003c/p\u003e\n\u003cp\u003e\n    \u003cb\u003eVulnerable Code:\u003c/b\u003e\u003cbr/\u003e\n    \u003cpre\u003e\nEntityManager pm \u003d getEM();\n\nTypedQuery\u0026lt;UserEntity\u0026gt; q \u003d em.createQuery(\n    String.format(\"select * from Users where name \u003d %s\", username),\n    UserEntity.class);\n\nUserEntity res \u003d q.getSingleResult();\u003c/pre\u003e\n\u003c/p\u003e\n\u003cp\u003e\n    \u003cb\u003eSolution:\u003c/b\u003e\u003cbr/\u003e\n    \u003cpre\u003e\nTypedQuery\u0026lt;UserEntity\u0026gt; q \u003d em.createQuery(\n    \"select * from Users where name \u003d usernameParam\",UserEntity.class)\n    .setParameter(\"usernameParam\", username);\n\nUserEntity res \u003d q.getSingleResult();\u003c/pre\u003e\n\u003c/p\u003e\n\u003cbr/\u003e\n\u003cp\u003e\n\u003cb\u003eReferences (JPA)\u003c/b\u003e\u003cbr/\u003e\n\u003ca href\u003d\"https://docs.oracle.com/javaee/6/tutorial/doc/bnbrg.html\"\u003eThe Java EE 6 Tutorial: Creating Queries Using the Java Persistence Query Language\u003c/a\u003e\u003cbr/\u003e\n\u003cb\u003eReferences (SQL injection)\u003c/b\u003e\u003cbr/\u003e\n\u003ca href\u003d\"http://projects.webappsec.org/w/page/13246963/SQL%20Injection\"\u003eWASC-19: SQL Injection\u003c/a\u003e\u003cbr/\u003e\n\u003ca href\u003d\"https://capec.mitre.org/data/definitions/66.html\"\u003eCAPEC-66: SQL Injection\u003c/a\u003e\u003cbr/\u003e\n\u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE-89: Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)\u003c/a\u003e\u003cbr/\u003e\n\u003ca href\u003d\"https://www.owasp.org/index.php/Top_10_2013-A1-Injection\"\u003eOWASP: Top 10 2013-A1-Injection\u003c/a\u003e\u003cbr/\u003e\n\u003ca href\u003d\"https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet\"\u003eOWASP: SQL Injection Prevention Cheat Sheet\u003c/a\u003e\u003cbr/\u003e\n\u003ca href\u003d\"https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet\"\u003eOWASP: Query Parameterization Cheat Sheet\u003c/a\u003e\u003cbr/\u003e\n\u003c/p\u003e\n\n        ","filename":"com/appsecco/dvja/services/UserService.java","line":"75","severity":"Medium","category":"SECURITY"},{"name":"Found Struts 2 endpoint","scannerType":"SAST","description":"\n            \n\u003cp\u003eIn Struts 2, the endpoints are Plain Old Java Objects (POJO) which means no Interface/Class needs to be implemented/extended.\u003c/p\u003e\n\u003cp\u003eWhen a request is routed to its controller (like the selected class), the supplied HTTP parameters are automatically mapped to setters for\nthe class. Therefore, all setters of this class should be considered as untrusted input even if the form doesn\u0027t include those values.\nAn attacker can simply provide additional values in the request, and they will be set in the object anyway, as long as that object has\nsuch a setter. The use of these parameters should be reviewed to make sure they are used safely.\u003c/p\u003e\n\n        ","filename":"com/appsecco/example/HelloWorld.java","line":"27","severity":"Low","category":"SECURITY"},{"name":"Found Struts 2 endpoint","scannerType":"SAST","description":"\n            \n\u003cp\u003eIn Struts 2, the endpoints are Plain Old Java Objects (POJO) which means no Interface/Class needs to be implemented/extended.\u003c/p\u003e\n\u003cp\u003eWhen a request is routed to its controller (like the selected class), the supplied HTTP parameters are automatically mapped to setters for\nthe class. Therefore, all setters of this class should be considered as untrusted input even if the form doesn\u0027t include those values.\nAn attacker can simply provide additional values in the request, and they will be set in the object anyway, as long as that object has\nsuch a setter. The use of these parameters should be reviewed to make sure they are used safely.\u003c/p\u003e\n\n        ","filename":"com/appsecco/example/Login.java","line":"24","severity":"Low","category":"SECURITY"}]